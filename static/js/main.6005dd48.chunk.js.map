{"version":3,"sources":["constants.js","components/MPMultiDropdown/index.js","components/DateRangePicker/index.js","components/SelectStatsFilters/index.js","components/LoadFailSnackbar/index.js","components/MPLoadFailSnackbar/index.js","components/GenericChart/index.js","App.js","services/index.js","reportWebVitals.js","index.js"],"names":["stage","process","localHostName","_process$env$HOST","HOST","GET_COUNTS_PER_MP_FOR_DATE_RANGE_URL_PER_STAGE","default","concat","production","GET_CURRENT_MPS_URL_PER_STAGE","Constants","DEFAULT_COUNT_RANGE_END_DATE","dayjs","Date","now","DEFAULT_COUNT_RANGE_START_DATE","GET_COUNTS_PER_MP_FOR_DATE_RANGE","_GET_COUNTS_PER_MP_FO","GET_CURRENT_MPS","_GET_CURRENT_MPS_URL_","MPMultiDropdown","_ref","allMPs","selectedMPs","selectMPs","isLoading","options","map","author","mpName","name","value","authorsLoaded","length","_jsx","SelectSearch","multiple","search","closeOnSelect","filterOptions","fuzzySearch","placeholder","onChange","printOptions","disabled","DateRangePicker","startDateForCount","selectStartDateForCount","endDateForCount","selectEndDateForCount","_jsxs","id","children","DateTimePicker","label","views","minDate","constants","maxDate","renderInput","params","TextField","helperText","error","SelectStatsFilters","authors","selectedMPsForCount","selectMPsForCount","LocalizationProvider","dateAdapter","AdapterDayjs","LoadFailSnackbar","didCountLoadFail","setDidCountLoadFail","closeSnackbar","Snackbar","open","autoHideDuration","onClose","message","action","Fragment","IconButton","size","aria-label","color","onClick","CloseIcon","fontSize","Alert","severity","variant","sx","width","MPLoadFailSnackbar","didMPsLoadFail","setDidMPsLoadFail","CanvasJSReact","CanvasJS","CanvasJSChart","COLORS","COLOR_LOOKUP_TABLE","Budget","Clarification","Bills","Motion","Tributes","Petitions","Attendance","getUniqueMPs","input","mps","forEach","inputDatum","includes","push","GenericChart","_ref2","debatesCount","dataForChartJSGraph","output","countPerMP","countsPerType","Object","keys","reportType","y","allUniqueMPsProvided","values","countsPerMp","uniqueMpsForReportType","uniqueMp","entries","countsPerMP","sort","a","b","localeCompare","transformDataForChartJSGraph","height","dataLength","Math","log2","containerProps","toolTip","shared","legend","verticalAlign","axisX","interval","data","countType","type","showInLegend","indexLabelFontColor","dataPoints","App","setAuthors","useState","setSelectedMPsForCount","setDebatesCount","uniqueSittingDates","setUniqueReportTypes","isCountLoading","setIsCountLoading","setStartDateForCount","setEndDateForCount","useEffect","axios","get","then","response","catch","e","async","mpNames","startDate","endDate","$d","getCountsPerMPForDateRange","transformedDebatesCount","uniqueReportTypes","countPerReportTypePerMp","i","transformDebatesCountV2","console","finally","isAtLeastOneMPSelected","isAnyCountLoaded","className","href","justSelectedMPsForCount","justSelectedStartDate","justSelectedEndDate","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6005dd48.chunk.js","sourcesContent":["import dayjs from 'dayjs';\n\nconst PARLIAMENT_START_DATE = '2020-08-24';\n\nconst stage = process.env.NODE_ENV;\n\nconst localHostName = process.env.HOST ?? 'localhost'\n\nconst GET_COUNTS_PER_MP_FOR_DATE_RANGE_URL_PER_STAGE = {\n  default: `http://${localHostName}:6969/counts-per-mp`,\n  production: 'https://hidden-pad-313204.as.r.appspot.com/counts-per-mp',\n};\n\nconst GET_CURRENT_MPS_URL_PER_STAGE = {\n  default: `http://${localHostName}:6969/current-mps`,\n  production: 'https://hidden-pad-313204.as.r.appspot.com/current-mps',\n};\n\nconst Constants = {\n  DEFAULT_COUNT_RANGE_END_DATE: dayjs(Date.now()),\n  DEFAULT_COUNT_RANGE_START_DATE: dayjs(new Date(PARLIAMENT_START_DATE)),\n\n  GET_COUNTS_PER_MP_FOR_DATE_RANGE:\n    GET_COUNTS_PER_MP_FOR_DATE_RANGE_URL_PER_STAGE[stage] ??\n    GET_COUNTS_PER_MP_FOR_DATE_RANGE_URL_PER_STAGE.default,\n  GET_CURRENT_MPS:\n    GET_CURRENT_MPS_URL_PER_STAGE[stage] ??\n    GET_CURRENT_MPS_URL_PER_STAGE.default,\n};\n\nexport default Constants;\n","import SelectSearch, { fuzzySearch } from 'react-select-search';\nimport './style.css';\n\nconst MPMultiDropdown = ({ allMPs, selectedMPs, selectMPs, isLoading }) => {\n  const options = allMPs.map((author) => {\n    const mpName = author.name;\n    return { name: mpName, value: mpName };\n  });\n  const loadingMessage = 'Loading the list of Members of Parliament...';\n  const placeholderMessage =\n    'Please select Members of Parliament to get counts for';\n  const authorsLoaded = allMPs.length > 0;\n  return (\n    <SelectSearch\n      options={options}\n      multiple={true}\n      search={true}\n      closeOnSelect={true}\n      filterOptions={fuzzySearch}\n      placeholder={authorsLoaded ? placeholderMessage : loadingMessage}\n      onChange={selectMPs}\n      value={selectedMPs}\n      printOptions={'on-focus'}\n      disabled={isLoading}\n    ></SelectSearch>\n  );\n};\n\nexport default MPMultiDropdown;\n","import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport { TextField } from '@mui/material';\nimport constants from '../../constants';\nimport './style.css';\n\nconst DateRangePicker = ({\n  startDateForCount,\n  selectStartDateForCount,\n  endDateForCount,\n  selectEndDateForCount,\n  isLoading,\n}) => {\n  return (\n    <div id=\"date-range-picker\">\n      <DateTimePicker\n        label=\"Start Year & Month\"\n        views={['year', 'month']}\n        minDate={constants.DEFAULT_COUNT_RANGE_START_DATE}\n        maxDate={constants.DEFAULT_COUNT_RANGE_END_DATE}\n        value={startDateForCount}\n        onChange={selectStartDateForCount}\n        renderInput={(params) => <TextField {...params} helperText={null} />}\n        disabled={isLoading}\n      />\n      <DateTimePicker\n        label=\"End Year & Month\"\n        views={['year', 'month']}\n        minDate={startDateForCount}\n        maxDate={constants.DEFAULT_COUNT_RANGE_END_DATE}\n        value={endDateForCount}\n        onChange={selectEndDateForCount}\n        renderInput={(params) => {\n          return (\n            <TextField\n              {...params}\n              error={true}\n              helperText=\"End date cannot be earlier than start.\"\n            />\n          );\n        }}\n        disabled={isLoading}\n      />\n    </div>\n  );\n};\n\nexport default DateRangePicker;\n","import MPMultiDropdown from '../MPMultiDropdown';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport DateRangePicker from '../DateRangePicker';\n\nimport './style.css';\n\nconst SelectStatsFilters = ({\n  authors,\n  selectedMPsForCount,\n  selectMPsForCount,\n  startDateForCount,\n  selectStartDateForCount,\n  endDateForCount,\n  selectEndDateForCount,\n  isLoading,\n}) => {\n  return (\n    <div id=\"select-stats-filters\">\n      <MPMultiDropdown\n        allMPs={authors}\n        selectedMPs={selectedMPsForCount}\n        selectMPs={selectMPsForCount}\n        isLoading={isLoading}\n      />\n      <LocalizationProvider dateAdapter={AdapterDayjs}>\n        <DateRangePicker\n          startDateForCount={startDateForCount}\n          selectStartDateForCount={selectStartDateForCount}\n          endDateForCount={endDateForCount}\n          selectEndDateForCount={selectEndDateForCount}\n          isLoading={isLoading}\n        />\n      </LocalizationProvider>\n    </div>\n  );\n};\n\nexport default SelectStatsFilters;\n","import { Fragment } from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Alert from '@mui/material/Alert';\n\nconst LoadFailSnackbar = ({ didCountLoadFail, setDidCountLoadFail }) => {\n  const closeSnackbar = () => setDidCountLoadFail(false);\n  return (\n    <Snackbar\n      open={didCountLoadFail}\n      autoHideDuration={6000}\n      onClose={closeSnackbar}\n      message=\"\"\n      action={\n        <Fragment>\n          <IconButton\n            size=\"small\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={closeSnackbar}\n          >\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        </Fragment>\n      }\n    >\n      <Alert\n        onClose={closeSnackbar}\n        severity=\"error\"\n        variant=\"filled\"\n        sx={{ width: '100%' }}\n      >\n        Failed to load the counts, please try again\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default LoadFailSnackbar;\n","import { Fragment } from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Alert from '@mui/material/Alert';\n\nconst MPLoadFailSnackbar = ({ didMPsLoadFail, setDidMPsLoadFail }) => {\n  const closeSnackbar = () => setDidMPsLoadFail(false);\n  return (\n    <Snackbar\n      open={didMPsLoadFail}\n      autoHideDuration={60000}\n      onClose={closeSnackbar}\n      message=\"\"\n      action={\n        <Fragment>\n          <IconButton\n            size=\"small\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={closeSnackbar}\n          >\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        </Fragment>\n      }\n    >\n      <Alert\n        onClose={closeSnackbar}\n        severity=\"error\"\n        variant=\"filled\"\n        sx={{ width: '100%' }}\n      >\n        Failed to load MPs to select, please reload the page or try again later.\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default MPLoadFailSnackbar;\n","import React from 'react';\nimport CanvasJSReact from '@canvasjs/react-charts';\n\nconst CanvasJS = CanvasJSReact.CanvasJS;\nconst CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nconst COLORS = {\n    BLUE: '#3498db',\n    GREEN: '#2ecc71',\n    RED: '#e74c3c',\n    ORANGE: '#f39c12',\n    PURPLE: '#9b59b6',\n    TURQUOISE: '#1abc9c',\n    PUMPKIN: '#e67e22',\n    MIDNIGHT_BLUE: '#34495e',\n    CONCRETE: '#95a5a6',\n    CHARCOAL: '#2c3e50',\n    WISTERIA: '#8e44ad',\n    SUNFLOWER: '#f1c40f',\n    NEPHRITIS: '#27ae60',\n};\n\nconst COLOR_LOOKUP_TABLE = {\n    'Written Answers to Questions for Oral Answer Not Answered by End of Question Time':\n        COLORS.BLUE,\n    'Written Answers to Questions': COLORS.GREEN,\n    'Oral Answers to Questions': COLORS.RED,\n    \"President's Address\": COLORS.ORANGE,\n    Budget: COLORS.PURPLE,\n    'Ministerial Statement': COLORS.TURQUOISE,\n    Clarification: COLORS.PUMPKIN,\n    Bills: COLORS.MIDNIGHT_BLUE,\n    'Bills Introduced': COLORS.CONCRETE,\n    'Matter Raised On Adjournment Motion': COLORS.CHARCOAL,\n    Motion: COLORS.PUMPKIN,\n    'Corrections by Written Statements': COLORS.NEPHRITIS,\n    Tributes: COLORS.WISTERIA,\n    'Point Of Order': COLORS.SUNFLOWER,\n    Petitions: COLORS.BLUE,\n    'Permission to Members to be Absent': COLORS.GREEN,\n    'Speaker / Announcement by Speaker': COLORS.RED,\n    'Administration Of Oaths': COLORS.ORANGE,\n    Attendance: COLORS.PURPLE,\n    'Personal Explanation': COLORS.TURQUOISE,\n};\n\n\nfunction transformDataForChartJSGraph(debatesCount) {\n    const output = {};\n\n    debatesCount.forEach((countPerMP) => {\n        const { name: mpName, ...countsPerType } = countPerMP;\n        Object.keys(countsPerType).forEach((reportType) => {\n            if (!output[reportType]) {\n                output[reportType] = [{ label: mpName, y: countsPerType[reportType] }];\n            } else {\n                output[reportType].push({ label: mpName, y: countsPerType[reportType] });\n            }\n        });\n    });\n\n    // this is required to avoid having duplicate y-axis labels - \n    //  must zero-pad count for each report type if MPs did not participate in them\n    const allUniqueMPsProvided = getUniqueMPs(debatesCount)\n    Object.values(output).forEach((countsPerMp) => {\n        const uniqueMpsForReportType = countsPerMp.map(countPerMP => countPerMP.label)\n        allUniqueMPsProvided.forEach(uniqueMp => {\n            if (uniqueMpsForReportType.includes(uniqueMp)) {\n                return\n            }\n            countsPerMp.push({ label: uniqueMp, y: 0 })\n        })\n    })\n\n    // also need to make sure to sort the countsPerMP in each reportType by the mpName.\n    // For some reason, the graph is put on the bar chart by its index, not the label\n    Object.entries(output).forEach(([reportType, countsPerMP]) => {\n        countsPerMP.sort((a, b) => {\n            return a.label.localeCompare(b.label);\n        })\n        output[reportType] = countsPerMP\n    })\n\n    return output;\n}\n\n\nfunction getUniqueMPs(input) {\n    const mps = [];\n\n    input.forEach((inputDatum) => {\n        const { name } = inputDatum;\n\n        if (mps.includes(name)) {\n            return;\n        }\n\n        mps.push(name);\n    });\n\n    return mps;\n}\n\nfunction countNumberOfUniqueMPs(input) {\n    const mps = getUniqueMPs(input)\n\n    return mps.length;\n}\n\nfunction calculateHeight(dataLength) {\n    if (dataLength <= 3) {\n        return 300\n    }\n    return 300 + Math.log2(dataLength) * 100\n}\n\nconst GenericChart = ({ debatesCount }) => {\n    const dataForChartJSGraph = transformDataForChartJSGraph(debatesCount)\n\n    const height = calculateHeight(countNumberOfUniqueMPs(debatesCount))\n    const containerProps = {\n        height: height\n    }\n\n    const barChartData = Object.keys(dataForChartJSGraph)\n        .map(countType => {\n            return {\n                type: \"stackedBar\",\n                color: COLOR_LOOKUP_TABLE[countType],\n                name: countType,\n                showInLegend: true,\n                indexLabelFontColor: \"white\",\n                dataPoints: dataForChartJSGraph[countType]\n            }\n        })\n\n    const options = {\n        height,\n        toolTip: {\n            shared: true\n        },\n        legend: {\n            verticalAlign: \"top\"\n        },\n        axisX: {\n            interval: 1,\n        },\n        data: barChartData,\n    }\n    return (\n        <CanvasJSChart\n            containerProps={containerProps}\n            options={options}\n        />\n    );\n}\n\nexport default GenericChart;","import { useEffect, useState } from 'react';\nimport { getCurrentMPs, getCountsPerMPForDateRange } from './services/index';\nimport './App.css';\n// import DebateStatistics from './components/DebateStatistics';\nimport SelectStatsFilters from './components/SelectStatsFilters';\nimport LoadFailSnackbar from './components/LoadFailSnackbar';\nimport Constants from './constants';\nimport MPLoadFailSnackbar from './components/MPLoadFailSnackbar';\nimport GenericChart from './components/GenericChart';\n\nconst transformDebatesCountV2 = (countPerReportTypePerMp) => {\n  const uniqueReportTypes = [];\n\n  for (const mpName in countPerReportTypePerMp) {\n    const countsPerMP = countPerReportTypePerMp[mpName];\n    if (!countPerReportTypePerMp[mpName]) {\n      countPerReportTypePerMp[mpName] = {};\n    }\n\n    for (const reportType in countsPerMP) {\n      if (!uniqueReportTypes.includes(reportType)) {\n        uniqueReportTypes.push(reportType);\n      }\n    }\n  }\n\n  const transformedDebatesCount = [];\n  const keys = Object.keys(countPerReportTypePerMp);\n  const values = Object.values(countPerReportTypePerMp);\n  for (let i = 0; i < Object.entries(countPerReportTypePerMp).length; i++) {\n    transformedDebatesCount.push({ name: keys[i], ...values[i] });\n  }\n  return [transformedDebatesCount, uniqueReportTypes];\n};\n\nfunction App() {\n  const [authors, setAuthors] = useState([]);\n  const [selectedMPsForCount, setSelectedMPsForCount] = useState([]);\n  const [debatesCount, setDebatesCount] = useState([]);\n  const [uniqueSittingDates, setUniqueReportTypes] = useState([]);\n  const [isCountLoading, setIsCountLoading] = useState(false);\n  const [startDateForCount, setStartDateForCount] = useState(\n    Constants.DEFAULT_COUNT_RANGE_START_DATE,\n  );\n  const [endDateForCount, setEndDateForCount] = useState(\n    Constants.DEFAULT_COUNT_RANGE_END_DATE,\n  );\n  const [didCountLoadFail, setDidCountLoadFail] = useState(false);\n  const [didMPsLoadFail, setDidMPsLoadFail] = useState(false);\n\n  useEffect(() => {\n    getCurrentMPs()\n      .then((response) => {\n        if (response.data) {\n          setAuthors(response.data);\n        }\n      })\n      .catch((e) => {\n        setDidMPsLoadFail(true);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (endDateForCount < startDateForCount) {\n      // console.error('TODO: Show error for startDate greater than endDate')\n      return;\n    }\n    if (selectedMPsForCount.length === 0) {\n      return;\n    }\n    setIsCountLoading(true);\n  }, [selectedMPsForCount, startDateForCount, endDateForCount]);\n\n  useEffect(() => {\n    if (!isCountLoading) {\n      return;\n    }\n    getCountsPerMPForDateRange(\n      selectedMPsForCount,\n      startDateForCount,\n      endDateForCount,\n    )\n      .then((response) => {\n        const [transformedDebatesCount, uniqueReportTypes] =\n          transformDebatesCountV2(response.data);\n        setDebatesCount(transformedDebatesCount);\n        setUniqueReportTypes(uniqueReportTypes);\n      })\n      .catch((error) => {\n        // TODO: catch such errors at Sentry\n        console.error('See error when fetching count:', error);\n        setDidCountLoadFail(true);\n      })\n      .finally(() => setIsCountLoading(false));\n  }, [isCountLoading, selectedMPsForCount, startDateForCount, endDateForCount]);\n\n  const selectMPsForCount = (justSelectedMPsForCount) => {\n    setSelectedMPsForCount(justSelectedMPsForCount);\n  };\n\n  const selectStartDateForCount = (justSelectedStartDate) => {\n    setStartDateForCount(justSelectedStartDate);\n  };\n\n  const selectEndDateForCount = (justSelectedEndDate) => {\n    setEndDateForCount(justSelectedEndDate);\n  };\n\n  const isAtLeastOneMPSelected = selectedMPsForCount.length > 0;\n  const isAnyCountLoaded = uniqueSittingDates.length > 0;\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>What Say Your MP</h1>\n      </header>\n      <div>\n        <p>\n          This project uses the{' '}\n          <a href=\"https://www.parliament.gov.sg/parliamentary-business/official-reports-(parl-debates)\">\n            official reports\n          </a>{' '}\n          of each parliamentary session to collect debate records, a.k.a.\n          Hansards. These debates are then analyzed to investigate the\n          involvement of each MP in debates.\n        </p>\n      </div>\n      <div>\n        <h2>Overall Statistics</h2>\n        {!isAtLeastOneMPSelected && !isCountLoading && (\n          <div>\n            <p>Please Select Some MPs</p>\n          </div>\n        )}\n        {isAtLeastOneMPSelected && !isCountLoading && !isAnyCountLoaded && (\n          <div>\n            <p>No results from the selection filter</p>\n          </div>\n        )}\n        {/* Doing some very unscientific AB testing on the two types of charts */}\n        {\n          isCountLoading ? (\n            <p>Loading...</p>\n          ) : isAnyCountLoaded && <GenericChart debatesCount={debatesCount} />\n        }\n        {/* {isCountLoading ? (\n          <p>Loading...</p>\n        ) : (\n          isAnyCountLoaded && (\n            <DebateStatistics\n              transformedDebatesCount={debatesCount}\n              uniqueReportTypes={uniqueSittingDates}\n            />\n          )\n        )} */}\n      </div>\n      <SelectStatsFilters\n        authors={authors}\n        selectedMPsForCount={selectedMPsForCount}\n        selectMPsForCount={selectMPsForCount}\n        startDateForCount={startDateForCount}\n        selectStartDateForCount={selectStartDateForCount}\n        endDateForCount={endDateForCount}\n        selectEndDateForCount={selectEndDateForCount}\n        isLoading={isCountLoading}\n      />\n      <footer className=\"note\">\n        <p>\n          Made for the collective knowledge of Singaporeans and the betterment\n          of Singaporean Democracy 🇸🇬\n        </p>\n        <p>\n          Please submit bugs, feature requests, and general feedback{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://forms.gle/seEDmBqZrQrqXeja8\"\n          >\n            here\n          </a>\n        </p>\n        <br></br>\n      </footer>\n      <LoadFailSnackbar\n        didCountLoadFail={didCountLoadFail}\n        setDidCountLoadFail={setDidCountLoadFail}\n      />\n      <MPLoadFailSnackbar\n        didMPsLoadFail={didMPsLoadFail}\n        setDidMPsLoadFail={setDidMPsLoadFail}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import axios from 'axios';\nimport constants from '../constants';\n\nconst getCurrentMPs = () => {\n  return axios.get(constants.GET_CURRENT_MPS);\n};\n\nconst getCountsPerMPForDateRange = async (mpNames, startDate, endDate) => {\n  return axios.get(constants.GET_COUNTS_PER_MP_FOR_DATE_RANGE, {\n    params: {\n      mpNames,\n      startDate: startDate.$d,\n      endDate: endDate.$d,\n    },\n  });\n};\n\nexport { getCurrentMPs, getCountsPerMPForDateRange };\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}