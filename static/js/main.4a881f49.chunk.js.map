{"version":3,"sources":["constants.js","services/index.js","components/DebateStatistics/index.js","components/MPMultiDropdown/index.js","components/DateRangePicker/index.js","components/SelectStatsFilters/index.js","components/LoadFailSnackbar/index.js","App.js","reportWebVitals.js","index.js"],"names":["Constants","DEFAULT_COUNT_RANGE_END_DATE","dayjs","Date","now","DEFAULT_COUNT_RANGE_START_DATE","GET_COUNTS_PER_MP_FOR_DATE_RANGE","GET_CURRENT_MPS","getCountsPerMPForDateRange","mpNames","startDate","endDate","a","axios","get","constants","params","$d","DebateStatistics","transformedDebatesCount","uniqueReportTypes","id","ResponsiveContainer","width","minHeight","BarChart","height","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","map","date","index","Bar","stackId","fill","randomColor","memo","MPMultiDropdown","allMPs","selectedMPs","selectMPs","isLoading","options","author","mpName","name","value","authorsLoaded","length","SelectSearch","multiple","search","closeOnSelect","filterOptions","fuzzySearch","placeholder","onChange","printOptions","disabled","DateRangePicker","startDateForCount","selectStartDateForCount","endDateForCount","selectEndDateForCount","DateTimePicker","label","views","minDate","maxDate","renderInput","TextField","helperText","SelectStatsFilters","authors","selectedMPsForCount","selectMPsForCount","LocalizationProvider","dateAdapter","AdapterDayjs","LoadFailSnackbar","didCountLoadFail","setDidCountLoadFail","closeSnackbar","Snackbar","open","autoHideDuration","onClose","message","action","IconButton","size","aria-label","color","onClick","fontSize","Alert","severity","variant","sx","App","useState","setAuthors","setSelectedMPsForCount","debatesCount","setDebatesCount","uniqueSittingDates","setUniqueReportTypes","isCountLoading","setIsCountLoading","setStartDateForCount","setEndDateForCount","useEffect","then","response","countPerReportTypePerMp","countsPerMP","reportType","includes","push","keys","Object","values","i","entries","transformDebatesCountV2","catch","error","console","finally","isAtLeastOneMPSelected","className","href","justSelectedMPsForCount","justSelectedStartDate","justSelectedEndDate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a881f49.chunk.js","sourcesContent":["import dayjs from 'dayjs';\n\nconst PARLIAMENT_START_DATE = '2020-08-24';\n\nconst Constants = {\n    DEFAULT_COUNT_RANGE_END_DATE: dayjs(Date.now()),\n    DEFAULT_COUNT_RANGE_START_DATE: dayjs(new Date(PARLIAMENT_START_DATE)),\n    \n    GET_COUNTS_PER_MP_FOR_DATE_RANGE: 'http://localhost:6969/counts-per-mp',\n    GET_CURRENT_MPS: 'http://localhost:6969/current-mps',\n}\n\nexport default Constants\n","import axios from 'axios'\nimport constants from '../constants'\n\nconst getCurrentMPs = () => {\n    return axios.get(constants.GET_CURRENT_MPS)\n}\n\nconst getCountsPerMPForDateRange = async (mpNames, startDate, endDate) => {\n    return axios.get(constants.GET_COUNTS_PER_MP_FOR_DATE_RANGE, { \n        params: {\n            mpNames,\n            startDate: startDate.$d,\n            endDate: endDate.$d\n        }\n    })\n}\n\nexport {\n    getCurrentMPs,\n    getCountsPerMPForDateRange\n}\n\n","import { memo } from 'react'\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip } from 'recharts';\nimport randomColor from 'randomcolor'\n\nimport './style.css'\n\nconst DebateStatistics = ({transformedDebatesCount, uniqueReportTypes}) => {\n  return (\n    <div id=\"debate-statistics-section\">\n      {/* <div id=\"debate-statistics-section__cards\">\n        <AggregateStatisticCard\n          title={\"Average number of debates per MP for period\"}\n          value={averageDebatesParticipated}\n        />\n        <AggregateStatisticCard\n          title={\"Total number of debates for period [PLACEHOLDER]\"}\n          value={-69}\n        />\n      </div> */}\n      <h3>Debates Participated Per Selected MP</h3>\n      <ResponsiveContainer width=\"100%\" minHeight=\"50vh\">\n        <BarChart\n          width={500}\n          height={300}\n          data={transformedDebatesCount}\n          margin={{\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          {uniqueReportTypes.map((date, index) => <Bar key={index} dataKey={date} stackId=\"a\" fill={randomColor()} />)}\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n\nexport default memo(DebateStatistics)","import SelectSearch, { fuzzySearch } from 'react-select-search'\nimport './style.css';\n\n// const specialNameCases = {\n//   'Mr Speaker': 'Mr Speaker (Mr Tan Chuan Jin)',\n//   'Mr Deputy Speaker': 'Mr Christopher de Souza (As Mr Deputy Speaker)',\n//   'Mdm Deputy Speaker': 'Ms Jessica Tan Soon Neo (As Mdm Deputy Speaker)'\n// }\n\nconst MPMultiDropdown = ({ allMPs, selectedMPs, selectMPs, isLoading }) => {\n  const options = allMPs.map((author, index) => {\n    // if (Object.keys(specialNameCases).includes(author)) {\n    //   return {name: specialNameCases[author], value: author}\n    // }\n    const mpName = author.name\n    return {name: mpName, value: mpName}\n  })\n  const loadingMessage = \"Loading the list of Members of Parliament...\"\n  const placeholderMessage = \"Please select Members of Parliament to get counts for\"\n  const authorsLoaded = allMPs.length > 0\n  return (\n    <SelectSearch\n      options={options}\n      multiple={true}\n      search={true}\n      closeOnSelect={true}\n      filterOptions={fuzzySearch}\n      placeholder={authorsLoaded ? placeholderMessage : loadingMessage}\n      onChange={selectMPs}\n      value={selectedMPs}\n      printOptions={'on-focus'}\n      disabled={isLoading}\n    >\n    </SelectSearch>        \n)}\n\nexport default MPMultiDropdown","import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport { TextField } from '@mui/material'\nimport constants from '../../constants';\nimport './style.css'\n\nconst DateRangePicker = ({\n    startDateForCount,\n    selectStartDateForCount,\n    endDateForCount,\n    selectEndDateForCount,\n    isLoading,\n}) => {\n    return <div id='date-range-picker'>\n      <DateTimePicker\n        label=\"Start Year & Month\"\n        views={['year', 'month']}\n        minDate={constants.DEFAULT_COUNT_RANGE_START_DATE}\n        maxDate={constants.DEFAULT_COUNT_RANGE_END_DATE}\n        value={startDateForCount}\n        onChange={selectStartDateForCount}\n        renderInput={(params) => <TextField {...params} helperText={null} />}\n        disabled={isLoading} />\n      <DateTimePicker\n        label=\"End Year & Month\"\n        views={['year', 'month']}\n        minDate={startDateForCount}\n        maxDate={constants.DEFAULT_COUNT_RANGE_END_DATE}\n        value={endDateForCount}\n        onChange={selectEndDateForCount}\n        // renderInput={(params) => {\n        //   console.log('see params')\n        //   console.log(params)\n        //   return (<TextField {...params} error={true} helperText=\"End date cannot be earlier than start.\" />)\n        //   // return (<TextField  error={true} helperText=\"End date cannot be earlier than start.\" />)\n        // }}\n        disabled={isLoading} />\n    </div>;\n  }\n  \n\nexport default DateRangePicker","import MPMultiDropdown from '../MPMultiDropdown';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport DateRangePicker from '../DateRangePicker';\n\nimport './style.css'\n\nconst SelectStatsFilters = ({ authors, selectedMPsForCount, selectMPsForCount, startDateForCount, selectStartDateForCount, endDateForCount, selectEndDateForCount, isLoading }) => {\n  return <div id='select-stats-filters'>\n    <MPMultiDropdown\n      allMPs={authors}\n      selectedMPs={selectedMPsForCount}\n      selectMPs={selectMPsForCount}\n      isLoading={isLoading} />\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DateRangePicker\n        startDateForCount={startDateForCount}\n        selectStartDateForCount={selectStartDateForCount}\n        endDateForCount={endDateForCount}\n        selectEndDateForCount={selectEndDateForCount}\n        isLoading={isLoading} />\n    </LocalizationProvider>\n  </div>;\n};\n\nexport default SelectStatsFilters","import { Fragment } from 'react'\nimport Snackbar from '@mui/material/Snackbar';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Alert from '@mui/material/Alert';\n\nconst LoadFailSnackbar = ({ didCountLoadFail, setDidCountLoadFail }) => {\n    const closeSnackbar = () => setDidCountLoadFail(false);\n    return (<Snackbar\n      open={didCountLoadFail}\n      autoHideDuration={6000}\n      onClose={closeSnackbar}\n      message=\"\"\n      action={(\n        <Fragment>\n          <IconButton\n            size=\"small\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={closeSnackbar}\n          >\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        </Fragment>\n      )}>\n      <Alert\n        onClose={closeSnackbar}\n        severity=\"error\"\n        variant=\"filled\"\n        sx={{ width: '100%' }}\n      >\n        Failed to load the counts, please try again\n      </Alert>\n    </Snackbar>)\n  }\n  \nexport default LoadFailSnackbar  ","import { useEffect, useState } from 'react'\nimport { getCurrentMPs, getCountsPerMPForDateRange } from './services/index'\nimport './App.css';\nimport DebateStatistics from './components/DebateStatistics';\nimport SelectStatsFilters from './components/SelectStatsFilters';\nimport LoadFailSnackbar from './components/LoadFailSnackbar';\nimport Constants from './constants';\n\nconst transformDebatesCountV2 = (countPerReportTypePerMp) => {\n  const uniqueReportTypes = []\n\n  for (const mpName in countPerReportTypePerMp) {\n    const countsPerMP = countPerReportTypePerMp[mpName];\n    if (!countPerReportTypePerMp[mpName]) {\n      countPerReportTypePerMp[mpName] = {};\n    }\n\n    for (const reportType in countsPerMP) {\n      if (!uniqueReportTypes.includes(reportType)) {\n        uniqueReportTypes.push(reportType)\n      }\n    }\n  }\n\n  const transformedDebatesCount = []\n  const keys = Object.keys(countPerReportTypePerMp)\n  const values = Object.values(countPerReportTypePerMp)\n  for (let i = 0; i < Object.entries(countPerReportTypePerMp).length; i++) {\n    transformedDebatesCount.push({ name: keys[i], ...values[i] })\n  };\n  return [transformedDebatesCount, uniqueReportTypes]\n}\n\nfunction App() {\n  const [authors, setAuthors] = useState([])\n  const [selectedMPsForCount, setSelectedMPsForCount] = useState([])\n  const [debatesCount, setDebatesCount] = useState([])\n  const [uniqueSittingDates, setUniqueReportTypes] = useState([])\n  const [isCountLoading, setIsCountLoading] = useState(false)\n  const [startDateForCount, setStartDateForCount] = useState(Constants.DEFAULT_COUNT_RANGE_START_DATE)\n  const [endDateForCount, setEndDateForCount] = useState(Constants.DEFAULT_COUNT_RANGE_END_DATE)\n  const [didCountLoadFail, setDidCountLoadFail] = useState(false)\n\n  useEffect(() => {\n    getCurrentMPs().then(response => {\n      if (response.data) {\n        setAuthors(response.data)\n      }\n    })\n  }, []);\n\n  useEffect(() => {\n    if (endDateForCount < startDateForCount) {\n      // console.error('TODO: Show error for startDate greater than endDate')\n      return\n    }\n    if (selectedMPsForCount.length === 0) {\n      return\n    }\n    setIsCountLoading(true)\n  }, [selectedMPsForCount, startDateForCount, endDateForCount])\n\n  useEffect(() => {\n    if (!isCountLoading) {\n      return\n    }\n    getCountsPerMPForDateRange(selectedMPsForCount, startDateForCount, endDateForCount)\n      .then(response => {\n        const [transformedDebatesCount, uniqueReportTypes] = transformDebatesCountV2(response.data)\n        setDebatesCount(transformedDebatesCount)\n        setUniqueReportTypes(uniqueReportTypes)\n      })\n      .catch(error => {\n        // TODO: catch such errors at Sentry\n        console.error('See error when fetching count:', error)\n        setDidCountLoadFail(true)\n      })\n      .finally(() => setIsCountLoading(false))\n  }, [isCountLoading, selectedMPsForCount, startDateForCount, endDateForCount])\n\n  const selectMPsForCount = (justSelectedMPsForCount) => {\n    setSelectedMPsForCount(justSelectedMPsForCount)\n  }\n\n  const selectStartDateForCount = (justSelectedStartDate) => {\n    setStartDateForCount(justSelectedStartDate)\n  }\n\n  const selectEndDateForCount = (justSelectedEndDate) => {\n    setEndDateForCount(justSelectedEndDate)\n  }\n\n  const isAtLeastOneMPSelected = uniqueSittingDates.length > 0\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>What Say Your MP</h1>\n      </header>\n      <div>\n        <p>This project uses the {' '}\n          <a href=\"https://www.parliament.gov.sg/parliamentary-business/official-reports-(parl-debates)\">official reports</a> {' '}\n          of each parliamentary session to collect debate records, a.k.a. Hansards. These debates are then analyzed to investigate the involvement of each MP in debates.</p>\n      </div>\n      <div>\n        <h2>Overall Statistics</h2>\n        {(!isAtLeastOneMPSelected && !isCountLoading) &&\n          <div>\n            <p>Please Select Some MPs</p>\n          </div>\n        }\n\n        {(isCountLoading) ? <p>Loading...</p> :\n          (isAtLeastOneMPSelected && <DebateStatistics\n            transformedDebatesCount={debatesCount}\n            uniqueReportTypes={uniqueSittingDates}\n          />)\n        }\n        <SelectStatsFilters\n          authors={authors}\n          selectedMPsForCount={selectedMPsForCount}\n          selectMPsForCount={selectMPsForCount}\n          startDateForCount={startDateForCount}\n          selectStartDateForCount={selectStartDateForCount}\n          endDateForCount={endDateForCount}\n          selectEndDateForCount={selectEndDateForCount}\n          isLoading={isCountLoading}\n        />\n      </div>\n      <footer className=\"note\">\n        <p>Made for the collective knowledge of Singaporeans and the betterment of Singaporean Democracy 🇸🇬</p>\n        <br></br>\n      </footer>\n      <LoadFailSnackbar\n        didCountLoadFail={didCountLoadFail}\n        setDidCountLoadFail={setDidCountLoadFail}\n      />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}