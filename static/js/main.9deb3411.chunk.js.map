{"version":3,"sources":["constants.js","components/DebateStatistics/index.js","components/MPMultiDropdown/index.js","components/DateRangePicker/index.js","components/SelectStatsFilters/index.js","components/LoadFailSnackbar/index.js","components/MPLoadFailSnackbar/index.js","App.js","services/index.js","reportWebVitals.js","index.js"],"names":["stage","process","GET_COUNTS_PER_MP_FOR_DATE_RANGE_URL_PER_STAGE","default","production","GET_CURRENT_MPS_URL_PER_STAGE","Constants","DEFAULT_COUNT_RANGE_END_DATE","dayjs","Date","now","DEFAULT_COUNT_RANGE_START_DATE","GET_COUNTS_PER_MP_FOR_DATE_RANGE","_GET_COUNTS_PER_MP_FO","GET_CURRENT_MPS","_GET_CURRENT_MPS_URL_","COLORS","COLOR_LOOKUP_TABLE","Budget","Clarification","Bills","Motion","Tributes","Petitions","Attendance","DebateStatistics","_ref","transformedDebatesCount","uniqueReportTypes","_jsxs","id","children","_jsx","ResponsiveContainer","width","minHeight","BarChart","height","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","map","reportType","index","Bar","stackId","fill","memo","MPMultiDropdown","allMPs","selectedMPs","selectMPs","isLoading","options","author","mpName","name","value","authorsLoaded","length","SelectSearch","multiple","search","closeOnSelect","filterOptions","fuzzySearch","placeholder","onChange","printOptions","disabled","DateRangePicker","startDateForCount","selectStartDateForCount","endDateForCount","selectEndDateForCount","DateTimePicker","label","views","minDate","constants","maxDate","renderInput","params","TextField","helperText","error","SelectStatsFilters","authors","selectedMPsForCount","selectMPsForCount","LocalizationProvider","dateAdapter","AdapterDayjs","LoadFailSnackbar","didCountLoadFail","setDidCountLoadFail","closeSnackbar","Snackbar","open","autoHideDuration","onClose","message","action","Fragment","IconButton","size","aria-label","color","onClick","CloseIcon","fontSize","Alert","severity","variant","sx","MPLoadFailSnackbar","didMPsLoadFail","setDidMPsLoadFail","App","setAuthors","useState","setSelectedMPsForCount","debatesCount","setDebatesCount","uniqueSittingDates","setUniqueReportTypes","isCountLoading","setIsCountLoading","setStartDateForCount","setEndDateForCount","useEffect","axios","get","then","response","catch","e","async","mpNames","startDate","endDate","$d","getCountsPerMPForDateRange","countPerReportTypePerMp","countsPerMP","includes","push","keys","Object","values","i","entries","transformDebatesCountV2","console","finally","isAtLeastOneMPSelected","isAnyCountLoaded","className","href","justSelectedMPsForCount","justSelectedStartDate","justSelectedEndDate","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9deb3411.chunk.js","sourcesContent":["import dayjs from 'dayjs';\n\nconst PARLIAMENT_START_DATE = '2020-08-24';\n\nconst stage = process.env.NODE_ENV;\n\nconst GET_COUNTS_PER_MP_FOR_DATE_RANGE_URL_PER_STAGE = {\n  default: 'http://localhost:6969/counts-per-mp',\n  production: 'https://hidden-pad-313204.as.r.appspot.com/counts-per-mp',\n};\n\nconst GET_CURRENT_MPS_URL_PER_STAGE = {\n  default: 'http://localhost:6969/current-mps',\n  production: 'https://hidden-pad-313204.as.r.appspot.com/current-mps',\n};\n\nconst Constants = {\n  DEFAULT_COUNT_RANGE_END_DATE: dayjs(Date.now()),\n  DEFAULT_COUNT_RANGE_START_DATE: dayjs(new Date(PARLIAMENT_START_DATE)),\n\n  GET_COUNTS_PER_MP_FOR_DATE_RANGE:\n    GET_COUNTS_PER_MP_FOR_DATE_RANGE_URL_PER_STAGE[stage] ??\n    GET_COUNTS_PER_MP_FOR_DATE_RANGE_URL_PER_STAGE.default,\n  GET_CURRENT_MPS:\n    GET_CURRENT_MPS_URL_PER_STAGE[stage] ??\n    GET_CURRENT_MPS_URL_PER_STAGE.default,\n};\n\nexport default Constants;\n","import { memo } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n} from 'recharts';\n\nimport './style.css';\n\nconst COLORS = {\n  BLUE: '#3498db',\n  GREEN: '#2ecc71',\n  RED: '#e74c3c',\n  ORANGE: '#f39c12',\n  PURPLE: '#9b59b6',\n  TURQUOISE: '#1abc9c',\n  PUMPKIN: '#e67e22',\n  MIDNIGHT_BLUE: '#34495e',\n  CONCRETE: '#95a5a6',\n  CHARCOAL: '#2c3e50',\n  WISTERIA: '#8e44ad',\n  SUNFLOWER: '#f1c40f',\n  NEPHRITIS: '#27ae60',\n};\n\nconst COLOR_LOOKUP_TABLE = {\n  'Written Answers to Questions for Oral Answer Not Answered by End of Question Time':\n    COLORS.BLUE,\n  'Written Answers to Questions': COLORS.GREEN,\n  'Oral Answers to Questions': COLORS.RED,\n  \"President's Address\": COLORS.ORANGE,\n  Budget: COLORS.PURPLE,\n  'Ministerial Statement': COLORS.TURQUOISE,\n  Clarification: COLORS.PUMPKIN,\n  Bills: COLORS.MIDNIGHT_BLUE,\n  'Bills Introduced': COLORS.CONCRETE,\n  'Matter Raised On Adjournment Motion': COLORS.CHARCOAL,\n  Motion: COLORS.PUMPKIN,\n  'Corrections by Written Statements': COLORS.NEPHRITIS,\n  Tributes: COLORS.WISTERIA,\n  'Point Of Order': COLORS.SUNFLOWER,\n  Petitions: COLORS.BLUE,\n  'Permission to Members to be Absent': COLORS.GREEN,\n  'Speaker / Announcement by Speaker': COLORS.RED,\n  'Administration Of Oaths': COLORS.ORANGE,\n  Attendance: COLORS.PURPLE,\n  'Personal Explanation': COLORS.TURQUOISE,\n};\n\nconst DebateStatistics = ({ transformedDebatesCount, uniqueReportTypes }) => {\n  return (\n    <div id=\"debate-statistics-section\">\n      <h3>Debates Participated Per Selected MP</h3>\n      <ResponsiveContainer width=\"100%\" minHeight=\"50vh\">\n        <BarChart\n          width={500}\n          height={300}\n          data={transformedDebatesCount}\n          margin={{\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          {uniqueReportTypes.map((reportType, index) => (\n            <Bar\n              key={index}\n              dataKey={reportType}\n              stackId=\"a\"\n              fill={COLOR_LOOKUP_TABLE[reportType]}\n            />\n          ))}\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default memo(DebateStatistics);\n","import SelectSearch, { fuzzySearch } from 'react-select-search';\nimport './style.css';\n\nconst MPMultiDropdown = ({ allMPs, selectedMPs, selectMPs, isLoading }) => {\n  const options = allMPs.map((author) => {\n    const mpName = author.name;\n    return { name: mpName, value: mpName };\n  });\n  const loadingMessage = 'Loading the list of Members of Parliament...';\n  const placeholderMessage =\n    'Please select Members of Parliament to get counts for';\n  const authorsLoaded = allMPs.length > 0;\n  return (\n    <SelectSearch\n      options={options}\n      multiple={true}\n      search={true}\n      closeOnSelect={true}\n      filterOptions={fuzzySearch}\n      placeholder={authorsLoaded ? placeholderMessage : loadingMessage}\n      onChange={selectMPs}\n      value={selectedMPs}\n      printOptions={'on-focus'}\n      disabled={isLoading}\n    ></SelectSearch>\n  );\n};\n\nexport default MPMultiDropdown;\n","import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport { TextField } from '@mui/material';\nimport constants from '../../constants';\nimport './style.css';\n\nconst DateRangePicker = ({\n  startDateForCount,\n  selectStartDateForCount,\n  endDateForCount,\n  selectEndDateForCount,\n  isLoading,\n}) => {\n  return (\n    <div id=\"date-range-picker\">\n      <DateTimePicker\n        label=\"Start Year & Month\"\n        views={['year', 'month']}\n        minDate={constants.DEFAULT_COUNT_RANGE_START_DATE}\n        maxDate={constants.DEFAULT_COUNT_RANGE_END_DATE}\n        value={startDateForCount}\n        onChange={selectStartDateForCount}\n        renderInput={(params) => <TextField {...params} helperText={null} />}\n        disabled={isLoading}\n      />\n      <DateTimePicker\n        label=\"End Year & Month\"\n        views={['year', 'month']}\n        minDate={startDateForCount}\n        maxDate={constants.DEFAULT_COUNT_RANGE_END_DATE}\n        value={endDateForCount}\n        onChange={selectEndDateForCount}\n        renderInput={(params) => {\n          return (\n            <TextField\n              {...params}\n              error={true}\n              helperText=\"End date cannot be earlier than start.\"\n            />\n          );\n        }}\n        disabled={isLoading}\n      />\n    </div>\n  );\n};\n\nexport default DateRangePicker;\n","import MPMultiDropdown from '../MPMultiDropdown';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport DateRangePicker from '../DateRangePicker';\n\nimport './style.css';\n\nconst SelectStatsFilters = ({\n  authors,\n  selectedMPsForCount,\n  selectMPsForCount,\n  startDateForCount,\n  selectStartDateForCount,\n  endDateForCount,\n  selectEndDateForCount,\n  isLoading,\n}) => {\n  return (\n    <div id=\"select-stats-filters\">\n      <MPMultiDropdown\n        allMPs={authors}\n        selectedMPs={selectedMPsForCount}\n        selectMPs={selectMPsForCount}\n        isLoading={isLoading}\n      />\n      <LocalizationProvider dateAdapter={AdapterDayjs}>\n        <DateRangePicker\n          startDateForCount={startDateForCount}\n          selectStartDateForCount={selectStartDateForCount}\n          endDateForCount={endDateForCount}\n          selectEndDateForCount={selectEndDateForCount}\n          isLoading={isLoading}\n        />\n      </LocalizationProvider>\n    </div>\n  );\n};\n\nexport default SelectStatsFilters;\n","import { Fragment } from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Alert from '@mui/material/Alert';\n\nconst LoadFailSnackbar = ({ didCountLoadFail, setDidCountLoadFail }) => {\n  const closeSnackbar = () => setDidCountLoadFail(false);\n  return (\n    <Snackbar\n      open={didCountLoadFail}\n      autoHideDuration={6000}\n      onClose={closeSnackbar}\n      message=\"\"\n      action={\n        <Fragment>\n          <IconButton\n            size=\"small\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={closeSnackbar}\n          >\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        </Fragment>\n      }\n    >\n      <Alert\n        onClose={closeSnackbar}\n        severity=\"error\"\n        variant=\"filled\"\n        sx={{ width: '100%' }}\n      >\n        Failed to load the counts, please try again\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default LoadFailSnackbar;\n","import { Fragment } from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Alert from '@mui/material/Alert';\n\nconst MPLoadFailSnackbar = ({ didMPsLoadFail, setDidMPsLoadFail }) => {\n  const closeSnackbar = () => setDidMPsLoadFail(false);\n  return (\n    <Snackbar\n      open={didMPsLoadFail}\n      autoHideDuration={60000}\n      onClose={closeSnackbar}\n      message=\"\"\n      action={\n        <Fragment>\n          <IconButton\n            size=\"small\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={closeSnackbar}\n          >\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        </Fragment>\n      }\n    >\n      <Alert\n        onClose={closeSnackbar}\n        severity=\"error\"\n        variant=\"filled\"\n        sx={{ width: '100%' }}\n      >\n        Failed to load MPs to select, please reload the page or try again later.\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default MPLoadFailSnackbar;\n","import { useEffect, useState } from 'react';\nimport { getCurrentMPs, getCountsPerMPForDateRange } from './services/index';\nimport './App.css';\nimport DebateStatistics from './components/DebateStatistics';\nimport SelectStatsFilters from './components/SelectStatsFilters';\nimport LoadFailSnackbar from './components/LoadFailSnackbar';\nimport Constants from './constants';\nimport MPLoadFailSnackbar from './components/MPLoadFailSnackbar';\n\nconst transformDebatesCountV2 = (countPerReportTypePerMp) => {\n  const uniqueReportTypes = [];\n\n  for (const mpName in countPerReportTypePerMp) {\n    const countsPerMP = countPerReportTypePerMp[mpName];\n    if (!countPerReportTypePerMp[mpName]) {\n      countPerReportTypePerMp[mpName] = {};\n    }\n\n    for (const reportType in countsPerMP) {\n      if (!uniqueReportTypes.includes(reportType)) {\n        uniqueReportTypes.push(reportType);\n      }\n    }\n  }\n\n  const transformedDebatesCount = [];\n  const keys = Object.keys(countPerReportTypePerMp);\n  const values = Object.values(countPerReportTypePerMp);\n  for (let i = 0; i < Object.entries(countPerReportTypePerMp).length; i++) {\n    transformedDebatesCount.push({ name: keys[i], ...values[i] });\n  }\n  return [transformedDebatesCount, uniqueReportTypes];\n};\n\nfunction App() {\n  const [authors, setAuthors] = useState([]);\n  const [selectedMPsForCount, setSelectedMPsForCount] = useState([]);\n  const [debatesCount, setDebatesCount] = useState([]);\n  const [uniqueSittingDates, setUniqueReportTypes] = useState([]);\n  const [isCountLoading, setIsCountLoading] = useState(false);\n  const [startDateForCount, setStartDateForCount] = useState(\n    Constants.DEFAULT_COUNT_RANGE_START_DATE,\n  );\n  const [endDateForCount, setEndDateForCount] = useState(\n    Constants.DEFAULT_COUNT_RANGE_END_DATE,\n  );\n  const [didCountLoadFail, setDidCountLoadFail] = useState(false);\n  const [didMPsLoadFail, setDidMPsLoadFail] = useState(false);\n\n  useEffect(() => {\n    getCurrentMPs()\n      .then((response) => {\n        if (response.data) {\n          setAuthors(response.data);\n        }\n      })\n      .catch((e) => {\n        setDidMPsLoadFail(true);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (endDateForCount < startDateForCount) {\n      // console.error('TODO: Show error for startDate greater than endDate')\n      return;\n    }\n    if (selectedMPsForCount.length === 0) {\n      return;\n    }\n    setIsCountLoading(true);\n  }, [selectedMPsForCount, startDateForCount, endDateForCount]);\n\n  useEffect(() => {\n    if (!isCountLoading) {\n      return;\n    }\n    getCountsPerMPForDateRange(\n      selectedMPsForCount,\n      startDateForCount,\n      endDateForCount,\n    )\n      .then((response) => {\n        const [transformedDebatesCount, uniqueReportTypes] =\n          transformDebatesCountV2(response.data);\n        setDebatesCount(transformedDebatesCount);\n        setUniqueReportTypes(uniqueReportTypes);\n      })\n      .catch((error) => {\n        // TODO: catch such errors at Sentry\n        console.error('See error when fetching count:', error);\n        setDidCountLoadFail(true);\n      })\n      .finally(() => setIsCountLoading(false));\n  }, [isCountLoading, selectedMPsForCount, startDateForCount, endDateForCount]);\n\n  const selectMPsForCount = (justSelectedMPsForCount) => {\n    setSelectedMPsForCount(justSelectedMPsForCount);\n  };\n\n  const selectStartDateForCount = (justSelectedStartDate) => {\n    setStartDateForCount(justSelectedStartDate);\n  };\n\n  const selectEndDateForCount = (justSelectedEndDate) => {\n    setEndDateForCount(justSelectedEndDate);\n  };\n\n  const isAtLeastOneMPSelected = selectedMPsForCount.length > 0;\n  const isAnyCountLoaded = uniqueSittingDates.length > 0;\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>What Say Your MP</h1>\n      </header>\n      <div>\n        <p>\n          This project uses the{' '}\n          <a href=\"https://www.parliament.gov.sg/parliamentary-business/official-reports-(parl-debates)\">\n            official reports\n          </a>{' '}\n          of each parliamentary session to collect debate records, a.k.a.\n          Hansards. These debates are then analyzed to investigate the\n          involvement of each MP in debates.\n        </p>\n      </div>\n      <div>\n        <h2>Overall Statistics</h2>\n        {!isAtLeastOneMPSelected && !isCountLoading && (\n          <div>\n            <p>Please Select Some MPs</p>\n          </div>\n        )}\n        {isAtLeastOneMPSelected && !isCountLoading && !isAnyCountLoaded && (\n          <div>\n            <p>No results from the selection filter</p>\n          </div>\n        )}\n        {isCountLoading ? (\n          <p>Loading...</p>\n        ) : (\n          isAnyCountLoaded && (\n            <DebateStatistics\n              transformedDebatesCount={debatesCount}\n              uniqueReportTypes={uniqueSittingDates}\n            />\n          )\n        )}\n        <SelectStatsFilters\n          authors={authors}\n          selectedMPsForCount={selectedMPsForCount}\n          selectMPsForCount={selectMPsForCount}\n          startDateForCount={startDateForCount}\n          selectStartDateForCount={selectStartDateForCount}\n          endDateForCount={endDateForCount}\n          selectEndDateForCount={selectEndDateForCount}\n          isLoading={isCountLoading}\n        />\n      </div>\n      <footer className=\"note\">\n        <p>\n          Made for the collective knowledge of Singaporeans and the betterment\n          of Singaporean Democracy 🇸🇬\n        </p>\n        <p>\n          Please submit bugs, feature requests, and general feedback{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://forms.gle/seEDmBqZrQrqXeja8\"\n          >\n            here\n          </a>\n        </p>\n        <br></br>\n      </footer>\n      <LoadFailSnackbar\n        didCountLoadFail={didCountLoadFail}\n        setDidCountLoadFail={setDidCountLoadFail}\n      />\n      <MPLoadFailSnackbar\n        didMPsLoadFail={didMPsLoadFail}\n        setDidMPsLoadFail={setDidMPsLoadFail}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import axios from 'axios';\nimport constants from '../constants';\n\nconst getCurrentMPs = () => {\n  return axios.get(constants.GET_CURRENT_MPS);\n};\n\nconst getCountsPerMPForDateRange = async (mpNames, startDate, endDate) => {\n  return axios.get(constants.GET_COUNTS_PER_MP_FOR_DATE_RANGE, {\n    params: {\n      mpNames,\n      startDate: startDate.$d,\n      endDate: endDate.$d,\n    },\n  });\n};\n\nexport { getCurrentMPs, getCountsPerMPForDateRange };\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}